(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]}];
implementors["encoding"] = [{"text":"impl Freeze for CodecError","synthetic":true,"types":[]},{"text":"impl Freeze for DecoderTrap","synthetic":true,"types":[]},{"text":"impl Freeze for EncoderTrap","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorDecoder","synthetic":true,"types":[]},{"text":"impl Freeze for ASCIIEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for ASCIIEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for ASCIIDecoder","synthetic":true,"types":[]},{"text":"impl Freeze for SingleByteEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for SingleByteEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for SingleByteDecoder","synthetic":true,"types":[]},{"text":"impl Freeze for UTF8Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for UTF8Encoder","synthetic":true,"types":[]},{"text":"impl Freeze for UTF8Decoder","synthetic":true,"types":[]},{"text":"impl Freeze for Little","synthetic":true,"types":[]},{"text":"impl Freeze for Big","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UTF16Encoding&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UTF16Encoder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UTF16Decoder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Windows949Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for Windows949Encoder","synthetic":true,"types":[]},{"text":"impl Freeze for EUCJPEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for EUCJPEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for Windows31JEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for Windows31JEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for ISO2022JPEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for ISO2022JPEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for GBK","synthetic":true,"types":[]},{"text":"impl Freeze for GB18030","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for GBEncoding&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for GBEncoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HZEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for HZEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for BigFive2003Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for BigFive2003Encoder","synthetic":true,"types":[]},{"text":"impl Freeze for EncoderOnlyUTF8Encoding","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Errors","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl Freeze for CompareResult","synthetic":true,"types":[]},{"text":"impl Freeze for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for VerboseError&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; Freeze for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]}];
implementors["rustyknife"] = [{"text":"impl Freeze for Legacy","synthetic":true,"types":[]},{"text":"impl Freeze for Intl","synthetic":true,"types":[]},{"text":"impl Freeze for ContentDisposition","synthetic":true,"types":[]},{"text":"impl Freeze for ContentTransferEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for Param","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Params&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Keyword","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for SMTPString","synthetic":true,"types":[]},{"text":"impl Freeze for ForwardPath","synthetic":true,"types":[]},{"text":"impl Freeze for ReversePath","synthetic":true,"types":[]},{"text":"impl Freeze for Command","synthetic":true,"types":[]},{"text":"impl Freeze for Mailbox","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Address","synthetic":true,"types":[]},{"text":"impl Freeze for DSNMailParams","synthetic":true,"types":[]},{"text":"impl Freeze for Notify","synthetic":true,"types":[]},{"text":"impl Freeze for DSNRet","synthetic":true,"types":[]},{"text":"impl Freeze for Domain","synthetic":true,"types":[]},{"text":"impl Freeze for QuotedString","synthetic":true,"types":[]},{"text":"impl Freeze for DotAtom","synthetic":true,"types":[]},{"text":"impl Freeze for Mailbox","synthetic":true,"types":[]},{"text":"impl Freeze for LocalPart","synthetic":true,"types":[]},{"text":"impl Freeze for DomainPart","synthetic":true,"types":[]},{"text":"impl Freeze for AddressLiteral","synthetic":true,"types":[]},{"text":"impl Freeze for Param","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Freeze for ArrayVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Freeze for TinyVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Freeze for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BidiClass","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Freeze for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IsNormalized","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()