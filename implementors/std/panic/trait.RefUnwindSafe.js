(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; RefUnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["encoding"] = [{"text":"impl RefUnwindSafe for CodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecoderTrap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncoderTrap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorDecoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASCIIEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASCIIEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASCIIDecoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SingleByteEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SingleByteEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SingleByteDecoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UTF8Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UTF8Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UTF8Decoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Little","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Big","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UTF16Encoding&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UTF16Encoder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UTF16Decoder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Windows949Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Windows949Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EUCJPEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EUCJPEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Windows31JEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Windows31JEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ISO2022JPEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ISO2022JPEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GBK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GB18030","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GBEncoding&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GBEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HZEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HZEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigFive2003Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigFive2003Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncoderOnlyUTF8Encoding","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl RefUnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; RefUnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["rustyknife"] = [{"text":"impl RefUnwindSafe for Legacy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Intl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentDisposition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentTransferEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Param","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keyword","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SMTPString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForwardPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReversePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mailbox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Address","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSNMailParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Notify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSNRet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Domain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotedString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotAtom","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mailbox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalPart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DomainPart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Param","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl RefUnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()